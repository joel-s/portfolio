#! /usr/bin/env python

# Sun proprietary. Internal use only.

# This file is indented with four-column tab characters.

# SCCS ID: "%Z%%M%	%I%	%E% SMI"

"""

genfile -- generate a file by formatting each 'record' in a 'table'

usage: genfile format-file

Read lines from standard input and format them using the contents of
format-file. The first line on standard input is a 'heading' consisting of
a list of field names. Each subsequent line should have the same number of
fields. Read the code for details; it is not that complicated.


-- XXX To do, to make this program more flexible:

usage: genfile [-f field-sep] [-r record-sep] format-file

"""

import sys
import string
import os


def die(s):
	sys.stderr.write(os.path.basename(sys.argv[0]) +": " +s)
	sys.exit(2)

def usage(s=None):
	progName = os.path.basename(sys.argv[0])
	if s:
		sys.stderr.write(progName +": " +s +"\n")
	sys.stderr.write("usage: " +progName +" format-file\n")
	sys.exit(2)

if __name__ == "__main__":
	args = sys.argv[1:]
	if len(args) != 1:
		usage()

	format = open(args[0], "r").read()

	inp = sys.stdin
	outp = sys.stdout

	header = inp.readline()
	headings = string.split(header)
	nFields = len(headings)
	if nFields == 0:
		die("no column headings found in first line of table")

	while 1:
		record = inp.readline()
		if record == "":
			break
		fields = string.split(record)
		if len(fields) != nFields:
			die("found a record with " +`len(fields)`
				+" fields; expected " +`nFields`)
		outstr = format
		for i in range(nFields):
			outstr = string.replace(outstr, "$" +headings[i] +"$",
									fields[i])
		outp.write(outstr)

# -- This version used the Python "%" operator to do formatting 

##if __name__ == "__main__":
##	args = sys.argv[1:]
##	if len(args) != 1:
##		usage()

##	format = open(args[0], "r").read()

##	inp = sys.stdin
##	outp = sys.stdout

##	header = inp.readline()
##	headings = string.split(header)
##	nFields = len(headings)
##	if nFields == 0:
##		die("no column headings found in first line of table")

##	while 1:
##		record = inp.readline()
##		if record == "":
##			break
##		fields = string.split(record)
##		if len(fields) != nFields:
##			die("found a record with " +`len(fields)`
##				+" fields; expected " +`nFields`)
##		dict = {}
##		for i in range(nFields):
##			dict[headings[i]] = fields[i]
##		outp.write(format % dict)
